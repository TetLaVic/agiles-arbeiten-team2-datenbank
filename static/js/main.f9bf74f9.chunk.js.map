{"version":3,"sources":["redux/ContactForm/ContactForm-actions.js","redux/ContactForm/ContactForm-reducer.js","redux/store.js","components/AppBar/AppBar.js","redux/ContactForm/ContactForm-operations.js","components/ContactForm/ContactForm.js","redux/ContactForm/ContactForm-selectors.js","components/Filter/Filter.js","components/ContactList/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Modal/Button/Button.js","components/Modal/Modal.js","App.js","index.js","components/ContactList/ContactList.module.css","components/Modal/Button/Button.module.css","components/ContactList/ContactListItem/ContactListItem.module.css","components/AppBar/AppBar.module.css","components/ContactForm/ContactForm.module.css","components/Modal/Modal.module.css"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterChange","actions","itemsReducer","createReducer","_","payload","state","find","contact","name","alert","filter","id","filterReducer","loading","contactsReducer","combineReducers","items","rootReducer","contacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","AppBar","Navbar","bg","variant","className","styles","axios","defaults","baseURL","semester","dispatch","post","then","data","catch","error","contactId","delete","get","ContactForm","reset","setState","handleChange","event","preventDefault","currentTarget","value","currentState","updateState","handleSubmit","props","onSubmit","Form","this","Group","controlId","Label","Control","type","placeholder","onChange","Button","Component","connect","operations","getFilter","getContacts","createSelector","normalizedFilter","toLowerCase","includes","Filter","filterState","onFilterChange","inline","FormControl","selectors","target","ContactListItem","onDeleteContact","listItem","onClick","buttonListItem","ContactList","onLoad","contactsList","map","contactList","Btn","children","ModalWindow","text","useState","show","setShow","handleClose","Modal","onHide","Header","closeButton","Title","Body","Footer","App","Container","Row","Col","h2Header","sModal","sContactList","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f9bf74f9.chunk.js","sourcesContent":["// import types from './ContactForm-types';\r\n// import { v4 as genId } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n// const addContact = ({ name, number, id }) => {\r\n//   return {\r\n//     type: types.ADD_CONTACT,\r\n//     payload: { name, number, id: genId() },\r\n//   };\r\n// };\r\n\r\n// const addContact = createAction(\r\n//   'ContactForm/AddContact',\r\n//   ({ name, number }) => {\r\n//     return { payload: { name, number, id: genId() } };\r\n//   },\r\n// );\r\n\r\n// const deleteContact = contactId => {\r\n//   return { type: types.DELETE_CONTACT, payload: contactId };\r\n// };\r\n\r\n// const deleteContact = createAction('ContactForm/DeleteContact');\r\n\r\n// const filterChange = value => {\r\n//   return {\r\n//     type: types.FILTER_CHANGE,\r\n//     payload: value,\r\n//   };\r\n// };\r\n\r\nconst filterChange = createAction('ContactForm/FilterChange');\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterChange,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n};\r\n","import { combineReducers } from 'redux';\r\n// import types from './ContactForm-types';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './ContactForm-actions';\r\nconst {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} = actions;\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD_CONTACT:\r\n//       if (state.find(contact => contact.name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts.`);\r\n//         return state;\r\n//       }\r\n//       return [...state, payload];\r\n//     case types.DELETE_CONTACT:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const findContact = (state, payload) => {\r\n//   if (state.find(contact => contact.name === payload.name)) {\r\n//     alert(`${payload.name} is already in contacts.`);\r\n//     return state;\r\n//   }\r\n// };\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    if (state.find(contact => contact.name === payload.name)) {\r\n      alert(`${payload.name} is already in contacts.`);\r\n      return state;\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER_CHANGE:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterReducer = createReducer('', {\r\n  'ContactForm/FilterChange': (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  loading,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './ContactForm/ContactForm-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n// import persistReducer from 'redux-persist/es/persistReducer';\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n// const rootReducer = {\r\n//   contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n// };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport styles from './AppBar.module.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nconst AppBar = () => {\r\n  return <Navbar bg=\"primary\" variant=\"dark\" className={styles.Navbar} />;\r\n};\r\n\r\nexport default AppBar;\r\n","import axios from 'axios';\r\nimport actions from './ContactForm-actions';\r\n\r\naxios.defaults.baseURL = ' http://localhost:4000';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('./contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = ({ name, semester }) => dispatch => {\r\n  dispatch(actions.addContactRequest());\r\n  axios\r\n    .post('/contacts', { name, semester })\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { Component } from 'react';\r\n// import { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/ContactForm/ContactForm-operations';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: '', semester: '' };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', semester: '' });\r\n  };\r\n\r\n  handleChange = event => {\r\n    event.preventDefault();\r\n    const { name, value } = event.currentTarget;\r\n    const currentState = this.state;\r\n    const updateState = { [name]: value };\r\n    this.setState({ ...currentState, ...updateState });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    // const nameInputId = genId();\r\n    // const telInputId = genId();\r\n\r\n    return (\r\n      <Form onSubmit={this.handleSubmit} className={styles.Form}>\r\n        <Form.Group controlId=\"formBasicName\">\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            type=\"name\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            placeholder=\"Enter name\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicSemester\">\r\n          <Form.Label>Semester</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            name=\"semester\"\r\n            placeholder=\"Semester\"\r\n            value={this.state.semester}\r\n            onChange={this.handleChange}\r\n          />\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Add student\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(operations.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getItems = state => state.contacts.items;\r\n\r\n// const getContacts = state => {\r\n//   const filter = getFilter(state);\r\n//   const items = getItems(state);\r\n\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return items.filter(({ name }) =>\r\n//     name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n//   );\r\n// };\r\n\r\nconst getContacts = createSelector([getFilter, getItems], (filter, items) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return items.filter(({ name }) =>\r\n    name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n  );\r\n});\r\n\r\nexport default { getFilter, getContacts };\r\n","import { Component } from 'react';\r\n// import { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n// import styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/ContactForm/ContactForm-actions';\r\nimport selectors from '../../redux/ContactForm/ContactForm-selectors';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    // const filterInputId = genId();\r\n    const { filterState, onFilterChange } = this.props;\r\n    return (\r\n      <Form inline>\r\n        <FormControl\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={filterState}\r\n          onChange={onFilterChange}\r\n          placeholder=\"Search\"\r\n          className=\"mr-sm-2\"\r\n        />\r\n        <Button variant=\"primary\">Search</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filters: PropTypes.string,\r\n  onFilterChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filterState: selectors.getFilter(state),\r\n  // filterState: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onFilterChange: event => dispatch(actions.filterChange(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ name, id, onDeleteContact }) => {\r\n  return (\r\n    <li id={id} className={styles.listItem}>\r\n      {name}\r\n      <button\r\n        onClick={() => {\r\n          onDeleteContact(id);\r\n        }}\r\n        className={styles.buttonListItem}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n  onDeleteContact: PropTypes.func,\r\n};\r\nexport default ContactListItem;\r\n","import { Component } from 'react';\r\nimport ContactListItem from './ContactListItem/ContactListItem';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/ContactForm/ContactForm-operations';\r\nimport selectors from '../../redux/ContactForm/ContactForm-selectors';\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.onLoad();\r\n  }\r\n  render() {\r\n    const { contactsList, onDeleteContact } = this.props;\r\n    return (\r\n      <ul>\r\n        {contactsList.map(({ name, id }) => {\r\n          return (\r\n            <ContactListItem\r\n              name={name}\r\n              // number={number}\r\n              key={id}\r\n              id={id}\r\n              onDeleteContact={onDeleteContact}\r\n              className={styles.contactList}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n// const getContactsToShow = ({ filter, items }) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return items.filter(({ name }) =>\r\n//     name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsList: selectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: contactId => dispatch(operations.deleteContact(contactId)),\r\n  onLoad: () => dispatch(operations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport styles from './Button.module.css';\r\n\r\nconst Btn = ({ children, onClick }) => {\r\n  return (\r\n    <Button variant=\"primary\" onClick={onClick} className={styles.Btn}>\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default Btn;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Btn from './Button';\r\nimport styles from './Button/Button.module.css';\r\n\r\nconst ModalWindow = ({ children, text }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Btn onClick={handleShow} className={styles.Btn}>\r\n        {text}\r\n      </Btn>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{children}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button type=\"submit\" variant=\"primary\" onClick={handleClose}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalWindow;\r\n","import { Component } from 'react';\nimport AppBar from './components/AppBar';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport ModalWindow from './components/Modal';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styles from './App.css';\nimport sModal from './components/Modal/Modal.module.css';\nimport sContactList from './components/ContactList/ContactList.module.css';\n// import { v4 as genId } from 'uuid';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <AppBar className={styles.AppBar} />\n        <Container>\n          <Row>\n            <Col>\n              <h2 className={styles.h2Header}>Talent management</h2>\n\n              <ModalWindow\n                text={\"Add student's info\"}\n                className={sModal.ModalWindow}\n              >\n                {<ContactForm />}\n              </ModalWindow>\n              <ModalWindow text={\"Add employee's info\"}>\n                {<ContactForm />}\n              </ModalWindow>\n            </Col>\n            <Col>\n              <h2 className={styles.h2Header}>Students and employees</h2>\n              <Filter />\n              <ContactList className={sContactList.ContactList} />\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1DrIE\",\"ListGroup\":\"ContactList_ListGroup__1mT-K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Btn\":\"Button_Btn__1i80I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__2VNZV\",\"buttonListItem\":\"ContactListItem_buttonListItem__1CjeX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"AppBar_Navbar__39eYR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__344MY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModalWindow\":\"Modal_ModalWindow__DjkVD\"};"],"sourceRoot":""}